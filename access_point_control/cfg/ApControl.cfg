#! /usr/bin/env python

PACKAGE='access_point_control'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("enabled", bool_t, 1, "Access point running status", False)

gen.add("ssid", str_t, 2, "Access point essid (network name)", "test")
gen.add("wmm", bool_t, 2, "Wireless multimedia extensions support", False)
mode_list = gen.enum([ gen.const("a", str_t, "a", "802.11a mode"),
                       gen.const("b", str_t, "b", "802.11b mode"),
                       gen.const("g", str_t, "g", "802.11g mode") ],
                     "Modes supported by the access point")
gen.add("mode", str_t, 2, "IEEE 802.11 mode", "b", edit_method = mode_list)

freq_list = gen.enum([ gen.const("Channel_1_2400MHz", double_t, 2412e6, "Channel 1 // 2.4GHz"),
                       gen.const("Channel_2_2400MHz", double_t, 2417e6, "Channel 2 // 2.4GHz"),
                       gen.const("Channel_3_2400MHz", double_t, 2422e6, "Channel 3 // 2.4GHz"),
                       gen.const("Channel_4_2400MHz", double_t, 2427e6, "Channel 4 // 2.4GHz"),
                       gen.const("Channel_5_2400MHz", double_t, 2432e6, "Channel 5 // 2.4GHz"),
                       gen.const("Channel_6_2400MHz", double_t, 2437e6, "Channel 6 // 2.4GHz"),
                       gen.const("Channel_7_2400MHz", double_t, 2442e6, "Channel 7 // 2.4GHz"),
                       gen.const("Channel_8_2400MHz", double_t, 2447e6, "Channel 8 // 2.4GHz"),
                       gen.const("Channel_9_2400MHz", double_t, 2452e6, "Channel 9 // 2.4GHz"),
                       gen.const("Channel_10_2400MHz", double_t, 2457e6, "Channel 10 // 2.4GHz"),
                       gen.const("Channel_11_2400MHz", double_t, 2462e6, "Channel 11 // 2.4GHz"),
                       gen.const("Channel_12_2400MHz", double_t, 2467e6, "Channel 12 // 2.4GHz"),
                       gen.const("Channel_13_2400MHz", double_t, 2472e6, "Channel 13 // 2.4GHz"),
                       gen.const("Channel_14_2400MHz", double_t, 2484e6, "Channel 14 // 2.4GHz"),
                       gen.const("Channel_131_3600MHz", double_t, 3657.5e6, "Channel 131 // 3.6GHz"),
                       gen.const("Channel_132_3600MHz", double_t, 3662.5e6, "Channel 132 // 3.6GHz"),
                       gen.const("Channel_132_3600MHz", double_t, 3660e6, "Channel 132 // 3.6GHz"),
                       gen.const("Channel_133_3600MHz", double_t, 3667.5e6, "Channel 133 // 3.6GHz"),
                       gen.const("Channel_133_3600MHz", double_t, 3665e6, "Channel 133 // 3.6GHz"),
                       gen.const("Channel_134_3600MHz", double_t, 3672.5e6, "Channel 134 // 3.6GHz"),
                       gen.const("Channel_134_3600MHz", double_t, 3670e6, "Channel 134 // 3.6GHz"),
                       gen.const("Channel_135_3600MHz", double_t, 3677.5e6, "Channel 135 // 3.6GHz"),
                       gen.const("Channel_136_3600MHz", double_t, 3682.5e6, "Channel 136 // 3.6GHz"),
                       gen.const("Channel_136_3600MHz", double_t, 3680e6, "Channel 136 // 3.6GHz"),
                       gen.const("Channel_137_3600MHz", double_t, 3687.5e6, "Channel 137 // 3.6GHz"),
                       gen.const("Channel_137_3600MHz", double_t, 3685e6, "Channel 137 // 3.6GHz"),
                       gen.const("Channel_138_3600MHz", double_t, 3689.5e6, "Channel 138 // 3.6GHz"),
                       gen.const("Channel_138_3600MHz", double_t, 3690e6, "Channel 138 // 3.6GHz"),
                       gen.const("Channel_183_5000MHz", double_t, 4915e6, "Channel 183 // 5GHz"),
                       gen.const("Channel_184_5000MHz", double_t, 4920e6, "Channel 184 // 5GHz"),
                       gen.const("Channel_185_5000MHz", double_t, 4925e6, "Channel 185 // 5GHz"),
                       gen.const("Channel_187_5000MHz", double_t, 4935e6, "Channel 187 // 5GHz"),
                       gen.const("Channel_188_5000MHz", double_t, 4940e6, "Channel 188 // 5GHz"),
                       gen.const("Channel_189_5000MHz", double_t, 4945e6, "Channel 189 // 5GHz"),
                       gen.const("Channel_192_5000MHz", double_t, 4960e6, "Channel 192 // 5GHz"),
                       gen.const("Channel_196_5000MHz", double_t, 4980e6, "Channel 196 // 5GHz"),
                       gen.const("Channel_7_5000MHz", double_t, 5035e6, "Channel 7 // 5GHz"),
                       gen.const("Channel_8_5000MHz", double_t, 5040e6, "Channel 8 // 5GHz"),
                       gen.const("Channel_9_5000MHz", double_t, 5045e6, "Channel 9 // 5GHz"),
                       gen.const("Channel_11_5000MHz", double_t, 5055e6, "Channel 11 // 5GHz"),
                       gen.const("Channel_12_5000MHz", double_t, 5060e6, "Channel 12 // 5GHz"),
                       gen.const("Channel_16_5000MHz", double_t, 5080e6, "Channel 16 // 5GHz"),
                       gen.const("Channel_34_5000MHz", double_t, 5170e6, "Channel 34 // 5GHz"),
                       gen.const("Channel_36_5000MHz", double_t, 5180e6, "Channel 36 // 5GHz"),
                       gen.const("Channel_38_5000MHz", double_t, 5190e6, "Channel 38 // 5GHz"),
                       gen.const("Channel_40_5000MHz", double_t, 5200e6, "Channel 40 // 5GHz"),
                       gen.const("Channel_42_5000MHz", double_t, 5210e6, "Channel 42 // 5GHz"),
                       gen.const("Channel_44_5000MHz", double_t, 5220e6, "Channel 44 // 5GHz"),
                       gen.const("Channel_46_5000MHz", double_t, 5230e6, "Channel 46 // 5GHz"),
                       gen.const("Channel_48_5000MHz", double_t, 5240e6, "Channel 48 // 5GHz"),
                       gen.const("Channel_52_5000MHz", double_t, 5260e6, "Channel 52 // 5GHz"),
                       gen.const("Channel_56_5000MHz", double_t, 5280e6, "Channel 56 // 5GHz"),
                       gen.const("Channel_60_5000MHz", double_t, 5300e6, "Channel 60 // 5GHz"),
                       gen.const("Channel_64_5000MHz", double_t, 5320e6, "Channel 64 // 5GHz"),
                       gen.const("Channel_100_5000MHz", double_t, 5500e6, "Channel 100 // 5GHz"),
                       gen.const("Channel_104_5000MHz", double_t, 5520e6, "Channel 104 // 5GHz"),
                       gen.const("Channel_108_5000MHz", double_t, 5540e6, "Channel 108 // 5GHz"),
                       gen.const("Channel_112_5000MHz", double_t, 5560e6, "Channel 112 // 5GHz"),
                       gen.const("Channel_116_5000MHz", double_t, 5580e6, "Channel 116 // 5GHz"),
                       gen.const("Channel_120_5000MHz", double_t, 5600e6, "Channel 120 // 5GHz"),
                       gen.const("Channel_124_5000MHz", double_t, 5620e6, "Channel 124 // 5GHz"),
                       gen.const("Channel_128_5000MHz", double_t, 5640e6, "Channel 128 // 5GHz"),
                       gen.const("Channel_132_5000MHz", double_t, 5660e6, "Channel 132 // 5GHz"),
                       gen.const("Channel_136_5000MHz", double_t, 5680e6, "Channel 136 // 5GHz"),
                       gen.const("Channel_140_5000MHz", double_t, 5700e6, "Channel 140 // 5GHz"),
                       gen.const("Channel_149_5000MHz", double_t, 5745e6, "Channel 149 // 5GHz"),
                       gen.const("Channel_153_5000MHz", double_t, 5765e6, "Channel 153 // 5GHz"),
                       gen.const("Channel_157_5000MHz", double_t, 5785e6, "Channel 157 // 5GHz"),
                       gen.const("Channel_161_5000MHz", double_t, 5805e6, "Channel 161 // 5GHz"),
                       gen.const("Channel_165_5000MHz", double_t, 5825e6, "Channel 165 // 5GHz") ],
                     "IEEE 802.11 channel/frequency list")

gen.add("freq", double_t, 2, "Access point frequency (Hz)", 2412e6, 0.0, 100000e6, edit_method = freq_list)
gen.add("ieee80211n", bool_t, 2, "IEEE 802.11n support", False)

encryption_list = gen.enum([ gen.const("open", str_t, "open", "no security (open)"),
                             gen.const("wep", str_t, "wep", "WEP security"),
                             gen.const("wpa", str_t, "wpa", "WPA-Personal security"),
                             gen.const("wpa2", str_t, "wpa2", "WPA2-Personal security"), 
                             gen.const("wpa_enterprise", str_t, "wpa_enterprise", "WPA-Enterprise security"),
                             gen.const("wpa2_enterprise", str_t, "wpa2_enterprise", "WPA2-Enterprise security"), 
                             gen.const("wpa_wpa2", str_t, "wpa_wpa2", "WPA or WPA2 security") ], 
                           "The types of encryption supported.")

gen.add("encryption_mode", str_t, 2, "Security mode", "open", edit_method = encryption_list)
gen.add("encryption_pass", str_t, 2, "Encryption key for WEP or passphrase for WPA", "")

gen.add("country_code", str_t, 2, "Wireless regulatory domain ISO/IEC 3166 alpha2 country code.", "US")

gen.add("txpower_auto", bool_t, 4, "Automatic TX power control", True)
gen.add("txpower", int_t, 4, "TX power (dBm) - set first txpower_auto to False", 0, 0, 30)

bitrate_list = gen.enum([ gen.const("Auto", int_t, 0, "Auto"),
                          gen.const("1Mbit", int_t, 1*10**6, "1 Mbit/s"),
                          gen.const("2Mbit", int_t, 2*10**6, "2 Mbit/s"),
                          gen.const("5_5Mbit", int_t, 55*10**5, "5.5 Mbit/s"),
                          gen.const("6Mbit", int_t, 6*10**6, "6 Mbit/s"),
                          gen.const("9Mbit", int_t, 9*10**6, "9 Mbit/s"),
                          gen.const("11Mbit", int_t, 11*10**6, "11 Mbit/s"),
                          gen.const("12Mbit", int_t, 12*10**6, "12 Mbit/s"),
                          gen.const("18Mbit", int_t, 18*10**6, "18 Mbit/s"),
                          gen.const("24Mbit", int_t, 24*10**6, "24 Mbit/s"),
                          gen.const("36Mbit", int_t, 36*10**6, "36 Mbit/s"),
                          gen.const("48Mbit", int_t, 48*10**6, "48 Mbit/s"),
                          gen.const("54Mbit", int_t, 54*10**6, "54 Mbit/s") ],
                        "802.11 bitrates")
gen.add("bitrate", int_t, 8, "TX bitrate (bps)", 0, edit_method = bitrate_list)

status_list = gen.enum([ gen.const("OK", str_t, "OK", "operation successfully completed"),
                         gen.const("FAIL", str_t, "FAIL", "last operation failed") ],
                       "Status code")

gen.add("status", str_t, 16, "Status of last parameter update", "OK", edit_method = status_list)
gen.add("errmsg", str_t, 16, "Error message if last update was not successful", "")

exit(gen.generate(PACKAGE, "ap_control_node", "ApControl"))
